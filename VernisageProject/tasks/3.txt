Для решения обеих задач применять компонентый подход.
Для этих целей на выбор подходит Angular / Vue / React

---------------------
Задание 1. Пишем кастомный select компонент
Стили должны быть полностью кастомные, а не стандартные браузерные,
т.е. стандартный <select> не использовать, а полностью эммулировать поведение.

Какие тесты должны проходить:
1) Передаём компоненту options из массива элементов heading/value.
При клике на любой элемент значение selected должно быть item.value

2) Селект можно закрыть кликом на пустом месте страницы

3) Элементы можно перебирать стрелками вверх/вниз, а по пробелу выбирается сам пункт

4) Должен быть скролл для более N options

5) Должен поддерживаться опциональный empty параметр.
Если true, то у селекта есть пустой пункт.

6) selected должен автоматически синхронизироваться с выбранным элеметов в select компоненте.

7) При передаче нового набора options текущий selected сбрасывается

и т.д. В общем все стандартные поведения <select> только с кастомными стилями
(например нельзя добавить скролл для множества элементов)

* Доп задание: поддержка поиска по селекту, как в select2 (см. ниже)

На что ориентироваться внешне:
https://select2.org/getting-started/basic-usage
-----------------------------------

Задание 2. Пишем файловый менеджер.
Поддерживает breadcrumbs, загрузку, удаление файлов.
При клике на конкретный файл показать его в компоненте просмотра файлов (аудио, картинки, видео)
Серверный код полностью на asp.net mvc, можете добавить в проект вернисаж.

* Доп задание: поддержка drag&drop фичи для загрузки файлов.
Поддержка папок приветствуется, live url и другие тяжелые фичи по желанию

На что ориентироваться внешне:
https://studio-42.github.io/elFinder